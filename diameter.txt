Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

Eg:
Input - See Code template
          1
         / \
        2   3
       / \     
      4   5
Output - 4
Return 4, which is the length [4,2,1,3] or [5,2,1,3].  
// code template starts
#include<stdio.h>
#include<stdlib.h>
struct node {
	int data;
	struct node *left, *right;
};
int diameter(struct node*);
void main() {
	struct node *root = (struct node *) malloc(sizeof(struct node));
	root->data = 1;
	root->left = (struct node *) malloc(sizeof(struct node));
	root->left->left = (struct node *) malloc(sizeof(struct node));
	root->left->right = (struct node *) malloc(sizeof(struct node));
	root->right = (struct node *) malloc(sizeof(struct node));

	root->left->data = 2;
	root->right->data = 3;
	root->left->left->data = 4;
	root->left->right->data = 5;
	printf("%d",diameter(root));
}
int diameter(struct node* root) {
	//write your code here
	return 0;
}
// code template ends
Hint: Use height to calculate the diameter